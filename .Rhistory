geom_boxplot(aes(fill = supp), show.legend = FALSE) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
library(datasets)
data(ToothGrowth)
#str(ToothGrowth)
#head(ToothGrowth)
#summary(ToothGrowth)
library(ggplot2)
t = ToothGrowth
levels(t$supp) <- c("Orange Juice", "Ascorbic Acid")
ggplot(t, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp), show.legend = FALSE) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
hypoth1<-t.test(len ~ supp, data = t)
hypoth1$conf.int
hypoth1$p.value
hypoth2<-t.test(len ~ supp, data = subset(t, dose == 0.5))
hypoth2$conf.int
hypoth2$p.value
swirl()
library(swirl)
swirl()
lm(child~parent,galton)
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals/(n-2)))
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit$residuals^2)
sRes <- deviance(fit$residuals^2)
sRes <- deviance(galton$child,fit)
?deviance
sRes <- deviance(fit)
sRes/sTot-1
1-sRes/sTot
summary(f)
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <-
| rep(1, nrow(galton))
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
head(trees)
fit <-lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <-lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(swiss, .)
all <- lm(swiss)
summary(all)
summary(lm())
summary(lm(all))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- . + ec
efit <- lm(. + ec ~ swiss$Fertility)
efit <- lm(ec ~ swiss$Fertility)
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
q
q()
list.files()
getwd()
ls
swirl()
library(swirl)
swirl()
head(InsectSprays)
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,n=15)
sA
summary(sA[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,classe)
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit$coefficients)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray -1,InsectSprays)
summary(nfit)$coef
spray2 <- relevel(factor=InsectSprays$spray,C)
spray2 <- relevel(InsectSprays$spray,C)
spray2 <- relevel(factor=InsectSprays$spray,level="C")
spray2 <- relevel(factor=InsectSprays$spray,level=C)
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray, spray2)
head(spray2)
fit2 <- lm(count ~ spray2, InsectSprays)
head(InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ predictor, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, hunger[,hunger$Sex=="Female"])
lmF <- lm(Numeric ~ Year, hunger)
lmF <- lm(Numeric[Sex="Female"] ~ Year[Sex="Female"], hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(fit)$residuals^2)
sigma <- sqrt(sum(fit$residuals^2))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- df.residual(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) -predict(fit, out2)
dy^2/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss)
vif(mdl2)
x1c <- simbias
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- offset=log(visits+1)
mdl2 <- rpois(offset=log(visits+1))
mdl2 <- offset=log(visits+1)
mdl2 <- glm(offset=log(visits+1))
mdl2 <- glm(Simplestats~ visits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ visits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ visits, hits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ visits, hits
)
mdl2 <- glm(simplystats ~ visits)
mdl2 <- glm(simplystats ~ visits, hits, offset=1)
head(hits)
mdl2 <- glm(simplystats ~ visits, family = poisson, hits, offset=log(visits+1))
mdl2 <- glm(simplystats ~ date, family = poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
2.7632461-log(10)
library(ggplot2)
library(dplyr)
data(mtcars)
str(mtcars)
mtcars$am<-as.factor(mtcars$am)
levels(mtcars$am)<-c("AT", "MT")
aggregate(mpg~am, data=mtcars, mean)
atData<-mtcars[mtcars$am == "AT",]
mtData<-mtcars[mtcars$am == "MT",]
t.test(atData$mpg, mtData$mpg)
ggplot(data = mtcars, aes(mpg)) + geom_histogram() + facet_grid(.~am) + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data = mtcars, aes(mpg)) + geom_histogram(bins=30) + facet_grid(.~am) + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data = mtcars, aes(mpg)) + geom_histogram(bins=50) + facet_grid(.~am) + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data = mtcars, aes(mpg)) + geom_histogram(bins=20) + facet_grid(.~am) + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data = mtcars, aes(am,mpg)) + geom_boxplot() + labs(x= "Transmission", y = "MPG", title = "MPG: AT vs MT")
corr <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(corr)
fit1 <-lm(mpg~am, data = mtcars)
summary(fit1)
fit2 = step(lm(data = mtcars, mpg ~ .),trace=0,steps=10000)
summary(fit2)
fitstep<-lm(mpg~ am + wt + qsec, data = mtcars)
anova(fit1, fitstep)
par(mfrow = c(2,2))
plot(fit_2)
par(mfrow = c(2,2))
plot(fit2)
par(mfrow = c(2,2))
plot(fit2)
library(ggplot2)
library(dplyr)
ggplot(data = mtcars, aes(mpg)) + geom_histogram(bins=20) + facet_grid(.~am)
+ labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data = mtcars, aes(mpg)) + geom_histogram(bins=20) + facet_grid(.~am) + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data=mtcars,aes(mpg))+geom_histogram(bins=20)+facet_grid(.~am)+labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
ggplot(data=mtcars,aes(am,mpg))+geom_boxplot()
+labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
ggplot(data=mtcars,aes(am,mpg))+geom_boxplot()+labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
data(mtcars)
head(mtcars)
unlink('RegressionModel_cache', recursive = TRUE)
g <- ggplot(data=mtcars,aes(mpg))
g <- g + geom_histogram(bins=20)
g <- g + facet_grid(.~am)
g <- g + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
g
g <- ggplot(data=mtcars,aes(am,mpg))
g <- g + geom_boxplot()
g <- g + labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
g <- ggplot(data=mtcars,aes(am,mpg))
g <- g + geom_boxplot()
g <- g + labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
g
g <- ggplot(data=mtcars,aes(am,mpg))
g <- g + geom_boxplot()
g <- g + labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
g
g <- ggplot(data=mtcars,aes(am,mpg)) + geom_boxplot() + labs(x="Transmission",y="MPG",title="MPG: AT vs MT")
g <- ggplot(data=mtcars,aes(am,mpg)) + geom_boxplot() + labs(x="Transmission",y="MPG",title="MPG: AT vs MT")
g <- ggplot(data=mtcars,aes(am,mpg)) + geom_boxplot() + labs(x="Transmission",y="MPG",title="MPG: AT vs MT")
g
ggplot(data=mtcars,aes(am,mpg))+geom_boxplot()+labs(x= "Transmission",y="MPG",title="MPG: AT vs MT")
ggplot(data = mtcars, aes(am,mpg)) + geom_boxplot() + labs(x= "Transmission", y = "MPG", title = "MPG: AT vs MT")
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am<-as.factor(mtcars$am)
levels(mtcars$am)<-c("AT", "MT")
aggregate(mpg~am, data=mtcars, mean)
atData<-mtcars[mtcars$am == "AT",]
mtData<-mtcars[mtcars$am == "MT",]
t.test(atData$mpg, mtData$mpg)
g <- ggplot(data=mtcars,aes(mpg))
g <- g + geom_histogram(bins=20)
g <- g + facet_grid(.~am)
g <- g + labs(x = "Miles per Gallon", y = "Frequency", title = "MPG Histogram for AT and MT cars")
g
ggplot(data = mtcars, aes(am,mpg)) + geom_boxplot() + labs(x= "Transmission", y = "MPG", title = "MPG: AT vs MT")
g <- ggplot(data = mtcars, aes(am,mpg))
g <- g + geom_boxplot()
g <- g + labs(x= "Transmission", y = "MPG", title = "MPG: AT vs MT")
g
corr <- select(mtcars, mpg,cyl,disp,wt,qsec, am)
pairs(corr)
fit1 <-lm(mpg~am, data = mtcars)
summary(fit1)
fit2 = step(lm(data = mtcars, mpg ~ .),trace=0,steps=10000)
summary(fit2)
par(mfrow = c(2,2))
plot(fit2)
library(knitr)
library(caret)
install.packages("caret")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rattle")
install.packages("randomForest")
install.packages("corrplot")
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
set.seed(12345)
# set the URL for the download
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# download the datasets
training <- read.csv(url(UrlTrain))
testing  <- read.csv(url(UrlTest))
# create a partition with the training dataset
inTrain  <- createDataPartition(training$classe, p=0.7, list=FALSE)
TrainSet <- training[inTrain, ]
TestSet  <- training[-inTrain, ]
dim(TrainSet)
# remove variables with Nearly Zero Variance
NZV <- nearZeroVar(TrainSet)
TrainSet <- TrainSet[, -NZV]
TestSet  <- TestSet[, -NZV]
dim(TrainSet)
dim(TestSet)
# remove variables that are mostly NA
AllNA    <- sapply(TrainSet, function(x) mean(is.na(x))) > 0.95
TrainSet <- TrainSet[, AllNA==FALSE]
TestSet  <- TestSet[, AllNA==FALSE]
dim(TrainSet)
dim(TestSet)
# remove identification only variables (columns 1 to 5)
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
dim(TestSet)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
# model fit
set.seed(12345)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf",
trControl=controlRF)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
set.seed(12345)
# remove variables with Nearly Zero Variance
NZV <- nearZeroVar(TrainSet)
TrainSet <- TrainSet[, -NZV]
TestSet  <- TestSet[, -NZV]
dim(TrainSet)
dim(TestSet)
# remove variables that are mostly NA
AllNA    <- sapply(TrainSet, function(x) mean(is.na(x))) > 0.95
TrainSet <- TrainSet[, AllNA==FALSE]
TestSet  <- TestSet[, AllNA==FALSE]
dim(TrainSet)
dim(TestSet)
# remove identification only variables (columns 1 to 5)
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
dim(TestSet)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
# remove identification only variables (columns 1 to 5)
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
dim(TestSet)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
# remove variables with Nearly Zero Variance
NZV <- nearZeroVar(TrainSet)
TrainSet <- TrainSet[, -NZV]
TestSet  <- TestSet[, -NZV]
dim(TrainSet)
dim(TestSet)
# set the URL for the download
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# download the datasets
training <- read.csv(url(UrlTrain))
testing  <- read.csv(url(UrlTest))
# create a partition with the training dataset
inTrain  <- createDataPartition(training$classe, p=0.7, list=FALSE)
TrainSet <- training[inTrain, ]
TestSet  <- training[-inTrain, ]
dim(TrainSet)
dim(TestSet)
# remove variables with Nearly Zero Variance
NZV <- nearZeroVar(TrainSet)
TrainSet <- TrainSet[, -NZV]
TestSet  <- TestSet[, -NZV]
dim(TrainSet)
dim(TestSet)
# remove variables that are mostly NA
AllNA    <- sapply(TrainSet, function(x) mean(is.na(x))) > 0.95
TrainSet <- TrainSet[, AllNA==FALSE]
TestSet  <- TestSet[, AllNA==FALSE]
dim(TrainSet)
dim(TestSet)
# remove identification only variables (columns 1 to 5)
TrainSet <- TrainSet[, -(1:5)]
TestSet  <- TestSet[, -(1:5)]
dim(TrainSet)
dim(TestSet)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0))
# model fit
set.seed(12345)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf",
trControl=controlRF)
# model fit
set.seed(12345)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf", trControl=controlRF)
# model fit
#set.seed(12345)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf", trControl=controlRF)
head(modFitRandForest)
head(controlRF)
?train
library("e1071")
install.packages("e1071")
library(e1071)
# model fit
#set.seed(12345)
controlRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modFitRandForest <- train(classe ~ ., data=TrainSet, method="rf", trControl=controlRF)
modFitRandForest$finalModel
# prediction on Test dataset
predictRandForest <- predict(modFitRandForest, newdata=TestSet)
confMatRandForest <- confusionMatrix(predictRandForest, TestSet$classe)
confMatRandForest
# plot matrix results
plot(confMatRandForest$table, col = confMatRandForest$byClass,
main = paste("Random Forest - Accuracy =",
round(confMatRandForest$overall['Accuracy'], 4)))
# model fit
set.seed(12345)
modFitDecTree <- rpart(classe ~ ., data=TrainSet, method="class")
fancyRpartPlot(modFitDecTree)
# prediction on Test dataset
predictDecTree <- predict(modFitDecTree, newdata=TestSet, type="class")
confMatDecTree <- confusionMatrix(predictDecTree, TestSet$classe)
confMatDecTree
# plot matrix results
plot(confMatDecTree$table, col = confMatDecTree$byClass,
main = paste("Decision Tree - Accuracy =",
round(confMatDecTree$overall['Accuracy'], 4)))
# model fit
set.seed(12345)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitGBM  <- train(classe ~ ., data=TrainSet, method = "gbm",
trControl = controlGBM, verbose = FALSE)
# model fit
set.seed(12345)
controlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 1)
modFitGBM  <- train(classe ~ ., data=TrainSet, method = "gbm",
trControl = controlGBM, verbose = FALSE)
modFitGBM$finalModel
?corrplot
unlink('~/PracticalMachineLearning/Practical Machine Learning_cache', recursive = TRUE)
corMatrix <- cor(TrainSet[, -54])
corrplot(corMatrix, order = "FPC", method = "color", type = "upper", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
unlink('~/PracticalMachineLearning/Practical Machine Learning_cache', recursive = TRUE)
library(knitr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
library(e1071)
library(plyr)
library(dplyr)
set.seed(12345)
# set the URL for the download
UrlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
UrlTest  <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# download the datasets
training <- read.csv(url(UrlTrain))
getwd()
getwd("C:/Users/Huamiao/Documents/PracticalMachineLearning")
setwd("C:/Users/Huamiao/Documents/PracticalMachineLearning")
?knit
list.files()
knit("Practical Machine Learning.Rmd")
knit("Practical Machine Learning.Rmd",output = "Practical Machine Learning.html")
q()
